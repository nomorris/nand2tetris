// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. 
 *
 * In the case of a C-instruction, 
 *   computes the function specified b y the instruction. 
 * If the instruction specifies to read a memory value, 
 *   the inM input is expected to contain this value. 
 * If the instruction specifies to write a value to the memory, 
 *   sets the outM output to this value, sets the addressM output to the target address, and 
 *   asserts the writeM output 
 *     (when writeM == 0, any value may appear in outM).
 * If the reset input is 0, 
 *   computes the address of the next instruction and 
 *   sets the pc output to that value. 
 * If the reset input is 1, sets pc to 0.
 *
 *
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    

    Not(in=instruction[15], out=nino);
    Or(a=nino, b=instruction[5], out=abl);
    And(a=instruction[15], b=instruction[5], out=cina);
    
    Mux16(a=instruction, b=c, sel=cina, out=ain);
    ARegister(in=ain, load=abl, out=a, out[0..14]=addressM);
    And(a=instruction[15], b=instruction[4], out=dbl);
    DRegister(in=c, load=dbl, out=d);
    
    
    And(a=instruction[15], b=instruction[12], out=aorm);
    Mux16(a=a, b=inM, sel=aorm, out=aluy);
    ALU(x=d, y=aluy, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=c, out=outM, zr=zr, ng=ng);
    
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    Or(a=zr, b=ng, out=notgr);
    Not(in=notgr, out=gr);
    And(a=ng, b=instruction[2], out=jump1);
    And(a=zr, b=instruction[1], out=jump2);
    And(a=gr, b=instruction[0], out=jump3);
    Or(a=jump1, b=jump2, out=jump);
    Or(a=jump, b=jump3, out=jumpornah);
    And(a=jumpornah, b=instruction[15], out=j);
    PC(in=a, inc=true, load=j, reset=reset, out[0..14]=pc);    
}
