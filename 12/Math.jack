// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/** A library of commonly used mathematical functions.
 *  All functions runs in O(n), where n is the number of bits used
 *  for representing a two's complement integer value (16 in the Hack computer). 
 *  Note: Jack compilers implement multiplication and division
 *  using calls to OS functions in this class.
 */
class Math {
    static int n;             // Number of bits used for representing a two's complement integer
    static Array powersOfTwo; // Stores 2^0, 2^1, 2^2,..., 2^(n-1)

    // Initializes the Math library.
    function void init() {
        var int i, t;
        let powersOfTwo = Array.new(16);
        let i = 0;
        let t = 1;
        while (i < 16) {
            let powersOfTwo[i] = t;
            let t = t + t;
            let i = i + 1;
        }
        return;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*'
     *  in an expression, it handles it by invoking this method. 
     *  Thus, in Jack, x * y and Math.multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int z, xshift, i;
        var bool n;
        let n = (~((x > 0) = (y > 0)));
        let x = Math.abs(x);
        let y = Math.abs(y);
        let z = 0;
        let xshift = x;
        let i = 0;
        while (i < 16) {
            if ((powersOfTwo[i] & y) > 0) {
                let z = z + xshift;
            }
            let xshift = xshift + xshift;
            let i = i + 1;
        }
        if (n) { return (-z); } else { return z; }    
    }

    /** Returns the integer part of x / y.
     *  When a Jack compiler detects the division operator '/'
     *  an an expression, it handles it by invoking this method.
     *  Thus, x/y and Math.divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q;
        var bool n;
        let n = (~((x > 0) = (y > 0)));
        let x = Math.abs(x);
        let y = Math.abs(y);
        if (y = 0) { do Sys.error(3); return 0; }
        if (y > x) { return 0; }
        else {
            let q = Math.divide(x, y + y);
            if ((x - (2 * q * y)) < y) { if (n) {return (- (q + q));} else { return q + q; } }
            else { if (n) {return (- (q + q + 1));} else { return q + q + 1; }}
        }
    }

    /** Returns the integer part of the square root of x.
    */
    function int sqrt(int x) {
        var int i;
        if (x < 0) { do Sys.error(4); return 0; }
        let i = 181;
        while ((i * i) > x) {
            let i = i - 1;
        }
        return i;
    }
    
    /**
    function int sqrt(int x) {
        var int d, i, y;
        if (x < 0) { do Sys.error(4); return 0; }
        let i = 8;
        let y = 0;
        let d = 0;
        while (i > 0) {
            let i = i - 1;
            let d = y + powersOfTwo[i];
            if (((d*d)-1) < x) { let y = d; }
        }
        return y;
    } 
*/
    /** Returns the greater value.
    */
    function int max(int a, int b) {
        if (a < b) { return b; } else { return a; }
    }

    /** Returns the smaller value.
    */
    function int min(int a, int b) {
        if (a < b) { return a; } else { return b; }
    }

    /** Returns the absolute value of x
    */
    function int abs(int x) {
        if (x < 0) { return (-x); } else { return x; }    
    }
}
