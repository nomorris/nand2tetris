// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len, maxlen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) { 
       let str = Memory.alloc(maxLength+1);
       let len = 0;
       let maxlen = maxLength;
       return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Memory.deAlloc(str);
        return;
    }
    
    method Array getStrArr() { return str; }
    method int getMaxLen() { return maxlen; }

    /** Returns the current length of this string. */
    method int length() { return len;  }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if ((j > (-1)) & (j < len)) {
            return str[j];
        }
        else { do System.error(15); return 0; } 
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if ((j > (-1)) & (j < len)) {
            let str[j] = c;
        }
        else { do System.error(16);} 
        return;        
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if ((len + 1) < maxlen) {
            let str[len] = c;
            let len = len + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let str[len-1] = 32;
            let len = len - 1;
        }
        else { do System.error(17); }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val;
        let i = 0;
        let val = 0;
        while ((str[i] > 47) & (str[i] < 58)) {
            let val = (10 * val) + (str[i] - 48);
            let i = i + 1;
        }
        return val;    
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) { 
        var String w;
        var bool n;
        var int v, i, j;
        let n = val < 0; let v = Math.abs(val);
        let w = String.new(10);
        let len = 0;
        let i = 0; let j = 0;
        if (n) { let str[0] = 45; let i = 1; let len = len + 1; }
        if (v > 9) {
            do w.setInt(v / 10);
            while (j < w.length()) { let str[i+j] = w.charAt(j); let j = j + 1; }
            let str[i+j] = 48+(v - ((v / 10)*10));
            let len = w.length() + len + 1;
            return;
        }
        else { let str[i] = (48+(v - ((v / 10)*10))); let len = len + 1; return; }
    }

    /** Returns the new line character. */
    function char newLine() { return 128; }

    /** Returns the backspace character. */
    function char backSpace() { return 129; }

    /** Returns the double quote (") character. */
    function char doubleQuote() { return 34; }
}
