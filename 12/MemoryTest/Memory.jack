// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int mem;
    static List heap;
    static int ptr;
    static bool scarce;

    /** Initializes the class. */
    function void init() { 
        let mem = 0;
        let ptr = 2048;
        let heap = List.new(2048, 0, null); 
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) { return mem[address]; }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) { let mem[address] = value; return; }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) { 
        var List h, t;
        if (ptr < 16384) { 
            let ptr = ptr + size; 
            let mem[ptr] = size; 
            return (ptr - size) + 1; 
        }
        let h = heap;
        while ((~ (h.data() = null)) | (h.data() < size)) { let h = h.tail(); }
        let t = h.tail();
        let heap = t;
        return h.ptr();
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int sz;
        let sz = mem[o];
        do heap.cons(o, mem[o]);
        return;
    } 
}
